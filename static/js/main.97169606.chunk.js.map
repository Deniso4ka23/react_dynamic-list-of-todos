{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","todos","onSelectedTodo","selectedTodoId","className","map","todo","id","completed","classNames","title","type","onClick","TodoFilter","onFilterType","filterType","query","onQuery","value","onChange","e","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","useEffect","fetchData","a","userId","newUser","href","email","name","App","todoList","setTodoList","selectedTodo","setSlectedTodo","setFilterType","setQuery","hasLoadingError","setLoadingError","isError","newTodoList","handleClickTodo","visibleTodoList","useMemo","newFilterType","filter","item","getFilteredList","toLowerCase","includes","trim","newSelectFilterType","newQuery","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97169606.chunk.js","sourcesContent":["export const enum FilterType {\n  ALL = 'all',\n  COMPLETED = 'completed',\n  ACTIVE = 'active',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  onSelectedTodo: (todo: Todo) => void;\n  selectedTodoId?: number;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  onSelectedTodo,\n  selectedTodoId,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr key={todo.id} data-cy=\"todo\">\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames(\n                { 'has-text-danger': !todo.completed },\n                { 'has-text-success': todo.completed },\n              )}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => onSelectedTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i\n                  className={classNames(\n                    'far',\n                    { 'fa-eye-slash': selectedTodoId === todo.id },\n                    { 'fa-eye': selectedTodoId !== todo.id },\n                  )}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  filterType: string;\n  query: string;\n  onFilterType: (newSelectFilterType: string) => void;\n  onQuery: (newQuery: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onFilterType,\n  filterType,\n  query,\n  onQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={filterType}\n          onChange={(e) => onFilterType(e.target.value)}\n        >\n          <option value={FilterType.ALL}>All</option>\n          <option value={FilterType.ACTIVE}>Active</option>\n          <option value={FilterType.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(e) => onQuery(e.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n        {query && (\n          /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => onQuery('')}\n          />\n        )}\n      </span>\n    </p>\n  </form>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n  onSelectedTodo: (todo?: Todo) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onSelectedTodo }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const newUser = await getUser(todo.userId);\n\n      setUser(newUser);\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onSelectedTodo()}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable no-console */\n/* eslint-disable max-len */\nimport React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\n\nexport const App: React.FC = () => {\n  const [todoList, setTodoList] = useState<Todo[]>([]);\n  const [selectedTodo, setSlectedTodo] = useState<Todo | null>();\n  const [filterType, setFilterType] = useState('all');\n  const [query, setQuery] = useState('');\n  const [hasLoadingError, setLoadingError] = useState(false);\n\n  const isError = hasLoadingError ? 'Error: Data has not been loaded' : <Loader />;\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoadingError(false);\n      try {\n        const newTodoList = await getTodos();\n\n        setTodoList(newTodoList);\n      } catch (error) {\n        setLoadingError(true);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const handleClickTodo = (todo?: Todo) => {\n    setSlectedTodo(todo);\n  };\n\n  const getFilteredList = (newFilterType: string) => {\n    switch (newFilterType) {\n      case FilterType.COMPLETED:\n        return todoList.filter(item => item.completed);\n      case FilterType.ACTIVE:\n        return todoList.filter(item => !item.completed);\n      default:\n        return todoList;\n    }\n  };\n\n  const handleSelelect = (newSelectFilterType: string) => {\n    setFilterType(newSelectFilterType);\n  };\n\n  const handleQuery = (newQuery: string) => {\n    setQuery(newQuery);\n  };\n\n  const visibleTodoList = useMemo(() => getFilteredList(filterType)\n    .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase().trim())),\n  [query, filterType, todoList]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterType={filterType}\n                onFilterType={handleSelelect}\n                onQuery={handleQuery}\n                query={query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {todoList.length === 0 ? (\n                isError\n              ) : (\n                <TodoList\n                  todos={visibleTodoList}\n                  onSelectedTodo={handleClickTodo}\n                  selectedTodoId={selectedTodo?.id}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onSelectedTodo={handleClickTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}